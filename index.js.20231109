// Generated by Selenium IDE
const { Builder, By, Key, until } = require("selenium-webdriver");
const assert = require("assert");
const parseCsv = require("./src/parseCsv");
const chrome = require("selenium-webdriver/chrome");
const options = new chrome.Options();

options.addArguments("user-data-dir=/Users/sherine/Library/Application Support/Google/Chrome/test");
options.addArguments("--no-sandbox");
options.addArguments('--disable-dev-shm-usage');
const getKey = (text) => {
  const clean = text.replace(/[^0-9A-Z]+/gi, "");
  const result = clean.substring(0, 35).toLowerCase(); //get first 35 characters
  return result.length === 0 ? "empty" : result;
};

function sleep(time) {
 return new Promise(function(resolve, reject){
  setTimeout(resolve, time);
});
}
const params = process.argv;
const isDryRun = params[4] ? true : false;
console.log("Is Dry Run: ", isDryRun);
// options.addArguments("profile-directory=Default");
const main = async () => {
  const data = await parseCsv(params[3]);
  console.log("============= DATA TO BE LOADED =============");
  console.log("data:", data);
  console.log("==============================================");
  const students = [];
  const fields = data[0].map((entry) => {
    return getKey(entry);
  });
  console.log("fields:", fields);

  const dataEntries = data.slice(1).map((entry) => {
    const grades = {};
    for (let i = 1; i < entry.length; i++) {
      grades[fields[i]] = entry[i];
    }
    students.push({
      name: entry[0],
      grades,
    });
  });
  console.log("Students and Grades:", students);
  let driver = await new Builder()
    .forBrowser("chrome")
    .setChromeOptions(options)
    .build();
  try {
    await driver.get(params[2]);

    for (let i = 0; i < students.length; i++) {
      const student = students[i];
      console.log("Processing Student:", student.name);
      await driver.wait(
        until.elementLocated(
          By.xpath(`//div[contains(text(),"${student.name}")]`)
        ),
        30000
      );

      await driver
        .findElement(By.xpath(`//div[contains(text(),'${student.name}')]`))
        .click();
      await driver.wait(
        until.elementLocated(
          By.xpath('//div[contains(text(),"Subject reports")]')
        ),
        30000
      );
      const test = await driver.findElement(
        By.xpath('//div[contains(text(),"Subject reports")]')
      );
      test.click();
      const selectInputs = await driver.findElements(
        By.css(".css-14biwwv-container")
      );
      console.log("## selet inputs:", selectInputs);
      const selectInputLabels = [];
      for (let i = 0; i < selectInputs.length; i++) {
        const selectInput = selectInputs[i];
        console.log("### selectInput:", selectInput);
        const parent = await driver.executeScript(
          "return arguments[0].closest('.EvaluationRowContainer__rowContainer___v1cCn').querySelector('.EvaluationRowContainer__leftContainer___GN2PZ');",
          selectInput
        );

        const parentLabel = await parent.getText();
        selectInputLabels.push(getKey(parentLabel));
      }

      await driver.executeScript(
        'var selectorAllResults = document.querySelectorAll(".css-14biwwv-container");         for (     var selectorIndex = 0;     selectorIndex < selectorAllResults.length;     selectorIndex++   ) {                console.log("adding classlist", selectorAllResults[selectorIndex]);                selectorAllResults[selectorIndex].classList.add(    arguments[0][selectorIndex]        );             } ;',
        selectInputLabels
      );

      const grades = student.grades;
      const gradesKeys = Object.keys(grades);
      for (let i = 0; i < gradesKeys.length; i++) {
        const gradeEntry = grades[gradesKeys[i]];
        await driver.wait(
          until.elementLocated(By.css("." + gradesKeys[i])),
          30000
        );
        const gradeField = await driver.findElement(
          By.css("." + gradesKeys[i])
        );
        await gradeField.findElement(By.xpath("./..")).click();
        await driver.sleep(500);
        driver.executeScript("window.scrollBy(0,250)", "");
        const gradeToEnter = gradeEntry.length > 0 ? gradeEntry : "-";

        await driver
          .findElement(By.css("." + gradesKeys[i] + " input"))
          .sendKeys(gradeToEnter);

        if (!isDryRun) {
          await driver
            .findElement(By.css("." + gradesKeys[i] + " input"))
            .sendKeys(Key.ENTER);
        } else {
          await driver.findElement(By.css("body")).click();
        }
        // await sleep(1000);
        console.log("--> setting ", gradesKeys[i], " to ", gradeEntry, " DONE");
      }
      await driver.sleep(1000);
      await driver.executeScript("history.back()");
    }
    await driver.sleep(5000);
  } catch (exception) {
    console.log("exception: ", exception);
  } finally {
    await new Promise((resolve, reject) => {
      setTimeout(resolve, 5000);
    });
    console.log("driver quit");
    await sleep(300000);
    await driver.quit();
  }
};
main();
